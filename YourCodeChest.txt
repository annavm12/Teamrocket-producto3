// DayFormComponent.jsx
import React, { useState } from 'react';
import { View, Text, TextInput, TouchableOpacity, StyleSheet } from 'react-native';

const DayFormComponent = ({ onSubmit, initialDay }) => {
  const [day, setDay] = useState(initialDay || {
    dayNumber: 0,
    city: '',
    resume: '',
    time: 'Mañana', // Default value
    info: {
      title: '',
      hotel: '',
      text: '',
      description: '',
      video: ''
    }
  });

  const handleInputChange = (name, value) => {
    setDay({ ...day, [name]: value });
  };

  const handleInfoChange = (name, value) => {
    setDay({ ...day, info: { ...day.info, [name]: value } });
  };

  const handleSubmit = () => {
    onSubmit(day);
  };

  return (
    <View style={styles.container}>
      <Text>Número de día:</Text>
      <TextInput
        value={day.dayNumber.toString()}
        onChangeText={(text) => handleInputChange('dayNumber', parseInt(text))}
        keyboardType="numeric"
        style={styles.input}
      />
      {/* Repeat for other fields like city, resume, etc. */}
      <Text>Título de info:</Text>
      <TextInput
        value={day.info.title}
        onChangeText={(text) => handleInfoChange('title', text)}
        style={styles.input}
      />
      {/* Repeat for other info fields like hotel, text, description, etc. */}
      
      <TouchableOpacity onPress={handleSubmit} style={styles.button}>
        <Text>Guardar día</Text>
      </TouchableOpacity>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    // Styles for the form container
  },
  input: {
    // Styles for the text input
  },
  button: {
    // Styles for the submit button
  }
});

export default DayFormComponent;


// Days.jsx
// src/components/days/DaysComponent.jsx

import React from 'react';
import { View, Text, TouchableOpacity, StyleSheet } from 'react-native';
import { filterByCity, filterByTimeOfDay } from '../../utils/filterUtilities';

const DaysComponent = ({ days, selectedCity, selectedTime, onDaySelected, onDeleteDay }) => {
  const getCardColor = (index) => {
    const colors = ['#B3C2F2', '#FF8811', '#9DD9D2', '#FFF8F0', '#DAB6FC','#C3Eb78', '#D5C6E0', '#FE9920','#41EAD4','#6C91C2','#C3C9E9','#9FA0FF','#8895B3']; 
    return colors[index % colors.length];
  };

  const filteredDays = filterByTimeOfDay(filterByCity(days, selectedCity), selectedTime);

  return (
    <View style={styles.container}>
      {filteredDays.map((day, index) => (
        <View key={day.id} style={[styles.card, { backgroundColor: getCardColor(index) }]}>
          <Text style={styles.header}>Dia {day.dayNumber}</Text>
          <View style={styles.body}>
            <Text style={styles.title}>{day.city}</Text>
            <Text>{day.resume}</Text>
            <Text>{day.time === 'Mañana' ? '🌞' : '🌜'}</Text>
          </View>
          <TouchableOpacity onPress={() => onDaySelected(day)} style={styles.button}>
            <Text>Info</Text>
          </TouchableOpacity>
          <TouchableOpacity onPress={() => onDeleteDay(day.id)} style={styles.deleteButton}>
            <Text>Eliminar</Text>
          </TouchableOpacity>
        </View>
      ))}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    // Styles for the container
  },
  card: {
    // Styles for each card
  },
  header: {
    // Styles for the header of each card
  },
  body: {
    // Styles for the body of each card
  },
  title: {
    // Styles for the title
  },
  button: {
    // Styles for the info button
  },
  deleteButton: {
    // Styles for the delete button
  }
});

export default DaysComponent;


// Detail.jsx
import React from 'react';
import { View, Text, TouchableOpacity, StyleSheet } from 'react-native';

const Detail = ({ info, onClose, onEdit }) => {
    return (
        <View style={styles.card}>
            <View style={styles.buttons}>
                <TouchableOpacity onPress={onEdit} style={styles.button}>
                    <Text>Editar Día</Text>
                </TouchableOpacity>
                <TouchableOpacity onPress={onClose} style={styles.button}>
                    <Text>Cerrar</Text>
                </TouchableOpacity>
            </View>

            <Text style={styles.title}>{info.title}</Text>
            <Text>Actividades: {info.text}</Text>
            <Text>Alojamiento: {info.hotel}</Text>
            <Text>Descripción: {info.description}</Text>
            {/* Display video if available */}
            {info.video && <Text>Video: {info.video}</Text>}
        </View>
    );
};

const styles = StyleSheet.create({
    card: {
        // Add your styles here
    },
    buttons: {
        // Add your styles here
    },
    button: {
        // Add your styles here
    },
    title: {
        // Add your styles here
    }
});

export default Detail;


// Search.jsx
import React, { useState } from 'react';
import { View, TextInput, TouchableOpacity, Text, StyleSheet } from 'react-native';

const Search = ({ onCitySearch, onTimeSearch }) => {
    const [query, setQuery] = useState('');
    const [selectedTime, setSelectedTime] = useState('TodoElDia');

    return (
        <View style={styles.container}>
            <TextInput
                style={styles.input}
                placeholder="Buscar por ciudad"
                value={query}
                onChangeText={setQuery}
            />
            <TouchableOpacity onPress={() => onCitySearch(query)} style={styles.button}>
                <Text>Buscar</Text>
            </TouchableOpacity>

            <View style={styles.timeSelector}>
                <TouchableOpacity onPress={() => setSelectedTime('TodoElDia')} style={styles.timeButton}>
                    <Text>Todo el día</Text>
                </TouchableOpacity>
                <TouchableOpacity onPress={() => setSelectedTime('Mañana')} style={styles.timeButton}>
                    <Text>Mañana 🌞</Text>
                </TouchableOpacity>
                <TouchableOpacity onPress={() => setSelectedTime('Tarde')} style={styles.timeButton}>
                    <Text>Tarde 🌜</Text>
                </TouchableOpacity>
            </View>
        </View>
    );
};

const styles = StyleSheet.create({
    container: {
        // Add your styles here
    },
    input: {
        // Add your styles here
    },
    button: {
        // Add your styles here
    },
    timeSelector: {
        // Add your styles here
    },
    timeButton: {
        // Add your styles here
    }
});

export default Search;


// dataStructure.js
const infoExample = {
  title: 'Title', // String
  hotel: 'Hotel Name', // String
  text: 'Activity Text', // String
  description: 'Detailed Description', // String
  video: 'Video URL' // String
};

const dayExample = {
  id: '1', // String (optional)
  dayNumber: 1, // Number
  city: 'City Name', // String
  resume: 'Description', // String
  time: 'Mañana', // String
  info: infoExample // Object of type IInfo
};

export { infoExample, dayExample };

// DataContext.js
import React, { createContext, useState, useEffect } from 'react';
import { collection, query, orderBy, onSnapshot, addDoc, updateDoc, deleteDoc, doc } from 'firebase/firestore';
import firestore from '../utils/Firebase'; // Asegúrate de que la ruta sea correcta

export const DataContext = createContext();

export const DataProvider = ({ children }) => {
  const [days, setDays] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const q = query(collection(firestore, "misviajes"), orderBy("dayNumber", "asc"));
    const unsubscribe = onSnapshot(q, querySnapshot => {
      const daysArray = querySnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      }));
      setDays(daysArray);
      setLoading(false);
    });

    return () => unsubscribe(); // Se asegura de desuscribirse del snapshot al desmontar
  }, []);

  const addDay = async day => {
    const docRef = await addDoc(collection(firestore, "misviajes"), day);
    return docRef.id; // Devuelve el ID del nuevo documento
  };

  const updateDay = async (dayId, day) => {
    const dayRef = doc(firestore, `misviajes/${dayId}`);
    await updateDoc(dayRef, day);
  };

  const deleteDay = async dayId => {
    const dayRef = doc(firestore, `misviajes/${dayId}`);
    await deleteDoc(dayRef);
  };

  return (
    <DataContext.Provider value={{ days, loading, addDay, updateDay, deleteDay }}>
      {children}
    </DataContext.Provider>
  );
};


// PushNotificationManager.js
import * as Notifications from 'expo-notifications';
import * as Device from 'expo-device';
import { Platform } from 'react-native';

export async function registerForPushNotificationsAsync() {
  let token;
  if (Device.isDevice) {
    const { status: existingStatus } = await Notifications.getPermissionsAsync();
    let finalStatus = existingStatus;
    if (existingStatus !== 'granted') {
      const { status } = await Notifications.requestPermissionsAsync();
      finalStatus = status;
    }
    if (finalStatus !== 'granted') {
      alert('Failed to get push token for push notification!');
      return;
    }
    token = (await Notifications.getExpoPushTokenAsync()).data;
  } else {
    alert('Must use physical device for Push Notifications');
  }

  if (Platform.OS === 'android') {
    Notifications.setNotificationChannelAsync('default', {
      name: 'default',
      importance: Notifications.AndroidImportance.MAX,
      vibrationPattern: [0, 250, 250, 250],
      lightColor: '#FF231F7C',
    });
  }

  return token;
}


// search.js
import { StyleSheet } from "react-native";

import { COLORS, FONT, SIZES } from "../constants";

const styles = StyleSheet.create({
    container: {
        width: "100%",
    },
    searchTitle: {
        fontFamily: FONT.bold,
        fontSize: SIZES.xLarge,
        color: COLORS.primary,
    },
    noOfSearchedJobs: {
        marginTop: 2,
        fontFamily: FONT.medium,
        fontSize: SIZES.small,
        color: COLORS.primary,
    },
    loaderContainer: {
        marginTop: SIZES.medium
    },
    footerContainer: {
        marginTop: SIZES.small,
        justifyContent: 'center',
        alignItems: 'center',
        flexDirection: 'row',
        gap: 10
    },
    paginationButton: {
        width: 30,
        height: 30,
        borderRadius: 5,
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: COLORS.tertiary
    },
    paginationImage: {
        width: '60%',
        height: '60%',
        tintColor: COLORS.white
    },
    paginationTextBox: {
        width: 30,
        height: 30,
        borderRadius: 2,
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: COLORS.white
    },
    paginationText: {
        fontFamily: FONT.bold,
        fontSize: SIZES.medium,
        color: COLORS.primary
    }
});

export default styles;


// filterUtilities.js
export const filterByCity = (days, city) => {
    if (!city) {
      return days;
    }
    return days.filter(item => item.city.toLowerCase().includes(city.toLowerCase()));
  };
  
  export const filterByTimeOfDay = (days, selectedTime) => {
    if (!selectedTime || selectedTime === "TodoElDia") {
      return days;
    }
    return days.filter(item => item.time === selectedTime);
  };
  

// Firebase.js
import { initializeApp } from 'firebase/app';
import { getFirestore } from 'firebase/firestore';

const firebaseConfig = {
  apiKey: "AIzaSyCXg6Dx-r--AYXDHgkVt07-UKK56AIOTEk",
  authDomain: "team-rocket-prod2.firebaseapp.com",
  databaseURL: "https://team-rocket-prod2-default-rtdb.europe-west1.firebasedatabase.app",
  projectId: "team-rocket-prod2",
  storageBucket: "team-rocket-prod2.appspot.com",
  messagingSenderId: "977220676190",
  appId: "1:977220676190:web:dc63c4123cb200809f22cf",
  measurementId: "G-6DE7MDL1GF"
};

// Inicializa Firebase
const app = initializeApp(firebaseConfig);

// Obtiene la instancia de Firestore
const firestore = getFirestore(app);

export default firestore;


// DetailView.jsx
import React from 'react';
import { View, Text } from 'react-native';

const DetailView = ({ route }) => {
  // Obtener el ID pasado como parámetro
  const { id } = route.params;

  return (
    <View>
      <Text>Detalle para el ID: {id}</Text>
      {/* Resto de tu componente */}
    </View>
  );
};

export default DetailView;


// MainPage.jsx
import React, { useContext } from 'react';
import { View, Text, TouchableOpacity, StyleSheet } from 'react-native';
import DaysComponent from '../components/days/Days';
import DetailComponent from '../components/detail/Detail';
import SearchComponent from '../components/search/Search';
import DayFormComponent from '../components/days/DayFormComponent';
import { DataContext } from '../services/DataContext'; // Asegúrate de que la ruta sea correcta

const MainPageView = () => {
  const { days, loading, addDay, updateDay, deleteDay } = useContext(DataContext);
  const [selectedDay, setSelectedDay] = React.useState(null);
  const [showForm, setShowForm] = React.useState(false);
  const [isEditing, setIsEditing] = React.useState(false);

  const handleDaySelect = day => setSelectedDay(day);

  const handleDayEdit = day => {
    setSelectedDay(day);
    setShowForm(true);
    setIsEditing(true);
  };

  const handleDayDelete = async dayId => {
    await deleteDay(dayId);
    // No es necesario actualizar el estado aquí ya que el contexto se actualizará automáticamente.
  };

  const handleCitySearch = city => {
    // Lógica para manejar la búsqueda por ciudad
  };

  const handleTimeSearch = time => {
    // Lógica para manejar la búsqueda por tiempo
  };

  const toggleForm = () => {
    setShowForm(!showForm);
    setIsEditing(false);
    setSelectedDay(null);
  };

  const handleFormSubmit = async newDay => {
    if (isEditing) {
      await updateDay(selectedDay.id, newDay);
    } else {
      await addDay(newDay);
    }
    setShowForm(false);
  };

  if (loading) {
    return <Text>Cargando...</Text>;
  }

  return (
    <View style={styles.container}>
      {/* ... Resto del componente */}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 10,
    backgroundColor: '#f0f0f0',
  },
  header: {
    fontSize: 22,
    fontWeight: 'bold',
    marginBottom: 10,
  },
  addButton: {
    backgroundColor: '#007bff',
    padding: 10,
    borderRadius: 5,
    alignItems: 'center',
    marginBottom: 10,
  },
});

export default MainPageView;


// App.js
import React, { useEffect } from 'react';
import { NavigationContainer } from '@react-navigation/native';
import { createNativeStackNavigator } from '@react-navigation/native-stack';
import MainPageView from './views/MainPage';
import DetailView from './views/DetailView'; // Asegúrate de que esta ruta es correcta
import { registerForPushNotificationsAsync } from './services/PushNotificationManager';

const Stack = createNativeStackNavigator();

// Configuración de enlaces profundos
const linking = {
  prefixes: ['mytravelapp://', 'https://mytravelapp.com'],
  config: {
    screens: {
      main: 'main', // Cambiado a 'main' para coincidir con Stack.Screen
      details: 'details', // Cambiado a 'details' para coincidir con Stack.Screen
    },
  },
};

const App = () => {
  useEffect(() => {
    registerForPushNotificationsAsync()
      .then(token => console.log("Push notification token:", token))
      .catch(err => console.error("Error al obtener el token de notificación push:", err));
  }, []);

  return (
    <NavigationContainer linking={linking}>
      <Stack.Navigator>
        <Stack.Screen
          name="main"
          component={MainPageView}
          options={{ title: 'Mi viaje por España' }}
        />
        <Stack.Screen
          name="details"
          component={DetailView}
          options={{ title: 'Detalles' }}
        />
      </Stack.Navigator>
    </NavigationContainer>
  );
};

export default App;


// index.js
import { AppRegistry } from 'react-native';
import App from '../app/App';
import { name as appName } from '../app.json';

AppRegistry.registerComponent(appName, () => App);

// app.json
{
  "expo": {
    "name": "Viajes",
    "slug": "Viajes",
    "version": "1.0.0",
    "orientation": "portrait",
    "icon": "./app/assets/icon.png",
    "splash": {
      "image": "./app/assets/splash.png",
      "resizeMode": "contain",
      "backgroundColor": "#ffffff"
    },
    "updates": {
      "fallbackToCacheTimeout": 0
    },
    "assetBundlePatterns": ["**/*"],
    "ios": {
      "supportsTablet": true,
      "bundleIdentifier": "com.TeamRocket.viajes",
      "infoPlist": {
        "CFBundleURLTypes": [{
          "CFBundleURLSchemes": ["myapp"]
        }]
      }
    },
    "android": {
      "adaptiveIcon": {
        "foregroundImage": "./app/assets/adaptive-icon.png",
        "backgroundColor": "#FFFFFF"
      },
      "package": "com.TeamRocket.viajes",
      "intentFilters": [
        {
          "action": "VIEW",
          "autoVerify": true,
          "data": [
            {
              "scheme": "https",
              "host": "www.viajes.com",
              "pathPrefix": "/path"
            },
            {
              "scheme": "myapp",
              "host": "*"
            }
          ],
          "category": ["BROWSABLE", "DEFAULT"]
        }
      ]
    },
    "web": {
      "favicon": "./app/assets/favicon.png"
    },
    "scheme": "myapp"
  }
}


// babel.config.js
module.exports = {
  presets: ['babel-preset-expo'],
  plugins: [
    'react-native-reanimated/plugin',
  ],
};


